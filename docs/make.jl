# This stuff is here only for local builds
local_build = "CI" ∉ keys(ENV)
if local_build # if we are local
    using Pkg
    Pkg.activate(@__DIR__)
    Pkg.develop(Pkg.PackageSpec(path = joinpath(@__DIR__, "..")))
    Pkg.instantiate()
end
using RedClust, Documenter, Literate

# Parse the basic example file
function preprocess_md(content)
    # hacky workaround to create @setup blocks in Literate
    content = replace(content, "#setup!" => "# ```@setup @__NAME__\n#=") 
    content = replace(content, "#!setup" => "=#\n# ```")
    if "CI" ∈ keys(ENV) # CI build
        content = replace(content, r"#local!(?s)(.*)#!local" => "")
        content = replace(content, r"#CI!(?s)(.*)#!CI" => s"\1")
    else # local build
        content = replace(content, r"#CI!(?s)(.*)#!CI" => "")
        content = replace(content, r"#local!(?s)(.*)#!local" => s"\1")
    end
    return content
end
function preprocess_jl(content)
    content = replace(content, "#setup!" => "")
    content = replace(content, "#!setup" => "")
    # remove the # hide lines when writing to .jl files
    content = replace(content, r" *nothing *# *hide *(\r\n|\n)" => "") 
    content = replace(content, r"(# *hide *)(\r\n|\n)" => s"\2")
    if "CI" ∈ keys(ENV) # CI build
        content = replace(content, r"#local!(?s)(.*)#!local" => "")
        content = replace(content, r"#CI!(?s)(.*)#!CI" => s"\1")
    else # local build
        content = replace(content, r"#CI!(?s)(.*)#!CI" => "")
        content = replace(content, r"#local!(?s)(.*)#!local" => s"\1")
    end
    return content
end
# For local builds, we gitignore folder names starting with and underscore. On GH-pages Jekyll ignores folders starting with an underscore, which we want to avoid. Therefore we place files generated by Literate.jl into a folder whose name depends on whether we have a local build. 
genfolder = local_build ? "_generated" : "generated" 
inputdir = joinpath(@__DIR__, "..", "examples")
inputfile = joinpath(inputdir, "basic_example.jl")
outputdir = joinpath(@__DIR__, "src", genfolder)
# Create the example file in the docs
Literate.markdown(inputfile, outputdir; 
name = "example", preprocess = preprocess_md)
# Create the actual example file
Literate.script(inputfile, outputdir; 
name = "example", preprocess = preprocess_jl, keep_comments=true)

# Build the documentation HTML pages
makedocs(;
    modules = [RedClust],
    authors = "Abhinav Natarajan <abhinav.v.natarajan@gmail.com>",
    repo = "https://github.com/abhinavnatarajan/RedClust.jl/blob/{commit}{path}#{line}",
    sitename = "RedClust.jl",
    format = Documenter.HTML(;
        prettyurls = !local_build, # pretty URLs are not resolved by browsers for local files
        canonical = "https://abhinavnatarajan.github.io/RedClust.jl",
        edit_link = "master",
        assets = String[],
        ansicolor = true
    ),
    pages = [
    "Introduction" => "index.md",
    "Example" => joinpath(genfolder, "example.md"),
    "Funding" => "funding.md",
    "Citation Information" => "cite.md",
    "API" => "reference.md",
    "Changelog" => "changelog.md"
    ]
)
if !local_build # deploy if not a local build
    deploydocs(;
        repo = "github.com/abhinavnatarajan/RedClust.jl",
        devbranch = "master"
    )
end